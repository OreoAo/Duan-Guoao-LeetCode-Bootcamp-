class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        if not matrix:
            return 0

        h,w = len(matrix),len(matrix[0])

        store = [[None]*(w) for i in range(h)]
        m = 0 
        def search_nearby(i,j):
            nonlocal m

            compare = [] 
            if i != 0 and matrix[i-1][j] < matrix[i][j]: 
                compare.append(store[i-1][j]) if store[i-1][j] else compare.append(search_nearby(i-1,j))

            if j != 0 and matrix[i][j-1] < matrix[i][j]: 
                compare.append(store[i][j-1]) if store[i][j-1] else compare.append(search_nearby(i,j-1))

            if i != h-1 and matrix[i+1][j] < matrix[i][j]: 
                compare.append(store[i+1][j]) if store[i+1][j] else compare.append(search_nearby(i+1,j))

            if j != w-1 and matrix[i][j+1] < matrix[i][j]: 
                compare.append(store[i][j+1]) if store[i][j+1] else compare.append(search_nearby(i,j+1))
            
            store[i][j] = max(compare)+1 if compare else 1

            m = max(m,store[i][j])
            return (store[i][j])
        
        for i in range(h):
            for j in range(w):
                if not store[i][j]:
                    search_nearby(i,j)
        
        return m
